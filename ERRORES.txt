EN ESTE ARCHIVO IREMOS EXPLICANDO Y DIAGNOSTICANDO LOS DIFERENTES ERRORES EN LA IMPLEMENTACION
DE LOS PRINCIPIOS SOLID


1º: Se hace un fork del repositorio en github y clonamos a la maquina local. Una vez clonado se abre el editor de
código para empezar a trabajar sobre el.

2: Antes de empezar con la modificación que se pide y el análisis de los principios SOLID incumplidos, debemos crear
el archivo ERRORES.txt en la raíz del proyecto. En este archivo iremos recogiendo los errores SOLID, y
sus posibles soluciones. Una vez que creamos dicho archivo, procedemos a crear el primer
commit “Initial commit: add ERRORES.txt”

3: A continuacion creamos una nueva rama en git "solid", en la que iremos trabajando las soluciones para una vez
probada y confirmada, añadirla a la rama principal "main".

4: El siguiente paso que vamos a realizar es la modificación del método getSize(), en el fichero Directory. La finalidad
es evitar que este método nos lance una excepción, si no que nos devuelva el tamaño total de los ficheros y
 directorios que contiene.

3: Observando el código en profundidad nos damos cuenta que dentro del paquete service, en la clase FileManager,
encontramos dos métodos con el nombre calculateSize();  como podemos observar, el segundo de estos métodos no se
esta usando actualmente, y además podemos ver que hace exactamente lo que se pide para la modificación de getSize(),
en la clase Directory.

4: Una vez encontrado dicho método en desuso, proseguimos a llamarlo desde el método getSize() la clase Directory
y añadirlo, quedando el código de la siguiente manera:

                     		@Override
                     	public int getSize() {
                       	  return FileManager.calculateSize(listFiles());
                     	}

5: A continuación, comprobamos que nuestro código compila y se ejecuta correctamente. Una vez comprobado procedemos a
realizar el segundo commit “getSize update”.

6: A continuación se procede a observar los principios SOLID que se están incumpliendo; Los principios SOLID son
los siguientes:
	1: Principio de responsabilidad única.
	2: Principio abierto / cerrado.
	3: Principio de sustitución de Liskov.
	4: Principio de segregación de interfaces.
	5: Principio de inversión de dependencias.

7: En cuanto al principio de responsabilidad única observamos que se incumple en los siguientes elementos:

- En la clase File, encontramos una serie de métodos, la mayoría relacionado con la gestión de archivos como por
ejemplo los métodos read(), open(), close() y otros métodos que se puede considerar realizan una función relacionada.
Sin embargo, al final del código nos encontramos con dos métodos que no están del
todo relacionados con los anteriores, estos son : convertWavToMp3() y convertMp3ToWav

8: Tras identificar estos dos métodos se procede a solventarlo, para ello se opta por crear una interfaz Converted
la cual implementamos en dos clases que vayamos a crear. Estas clases serian ConvertedWavToMp3 y ConvertedMp3ToWav.
Es estas clases donde implementamos los metodos.

9: Tras realizar los cambios y comprobar que el programa se compila y se ejecuta correctamente, procedemos
a realizar el siguiente commit “responsabilidad única SOLID1”